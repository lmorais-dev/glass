WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Main program structure
program = { SOI ~ (package_decl ~ ";"?)? ~ import_stmt* ~ (service_def | schema_def | enum_def)* ~ EOI }

// Package declaration
package_decl = { "package" ~ package_path }
package_path = { identifier ~ ("." ~ identifier)* }

// Import statement
import_stmt = { "import" ~ string_literal ~ ";" }

// Service definition
service_def = { "service" ~ identifier ~ "{" ~ service_method* ~ "}" }
service_method = { "fn" ~ identifier ~ "(" ~ method_param ~ ")" ~ "->" ~ method_return ~ ";" }

// Method parameters and returns
method_param = { stream_type | inline_schema | schema_ref }
method_return = { stream_type | inline_schema | schema_ref }

// Stream type
stream_type = { "stream" ~ (inline_schema | schema_ref) }

// Schema definition
schema_def = { "schema" ~ identifier ~ "{" ~ schema_field* ~ "}" }
schema_field = { identifier ~ ":" ~ field_type ~ ";" }

// Enum definition
enum_def = { "enum" ~ identifier ~ "{" ~ enum_variant ~ ("," ~ enum_variant)* ~ ","? ~ "}" }
enum_variant = { identifier }

// Inline schema
inline_schema = { "{" ~ inline_field* ~ "}" }
inline_field = { identifier ~ ":" ~ field_type ~ ("," | ";")? }

// Field types
field_type = {
    option_type |
    vec_type |
    primitive_type |
    schema_ref
}

option_type = { "Option" ~ "<" ~ field_type ~ ">" }
vec_type = { "Vec" ~ "<" ~ field_type ~ ">" }

// Primitive types
primitive_type = {
    "string" |
    "u8" | "u16" | "u32" | "u64" | "u128" |
    "i8" | "i16" | "i32" | "i64" | "i128" |
    "f32" | "f64" |
    "bool"
}

// Schema reference (can be qualified with package path)
schema_ref = { identifier ~ ("." ~ identifier)* }

// Basic tokens
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
string_literal = @{ "\"" ~ (!("\"" | "\\") ~ ANY | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "u" ~ ASCII_HEX_DIGIT{4}))* ~ "\"" }

// Numbers (for future extensibility)
number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }